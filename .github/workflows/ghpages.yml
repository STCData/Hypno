name: GHPages

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    name: Screen record and GH Pages deploy
    runs-on: macos-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: true

      - name: Record UITest Videos
        timeout-minutes: 11 
        continue-on-error: true
        run: |
          xcodebuild -destination 'platform=iOS Simulator,name=iPhone 14' \
           -project DataCollector.xcodeproj \
           -scheme DataCollectorUITests \
           -parallel-testing-enabled NO \
           test | .github/tools/xcuitestrecorder "iPhone 14" build/ghpages/UITestVideos

      - name: Prepare GH Pages
        run: |
          mkdir -p build/ghpages/_site
          cp README.md build/ghpages/
          cp docs/website/* build/ghpages/

      - name: install deps
        run: |
          brew install ffmpeg

#       - name: convert mp4s to gifs
#         run: |
#           for file in build/ghpages/UITestVideos/*.mp4; do 
#             output="${file%.mp4}.gif"
#             echo "$file  >>> $"
#             ffmpeg -y -ss 0 -t 600 -i "$file"  \
#               -filter_complex "[0:v]scale=w=585:h=1266,fps=24, split [a][b];[a] palettegen [p];[b][p] paletteuse" \
#               -loop 0 "$output"
#           done

      - name: Check source for Jekyll
        run: |
          ls -R build/ghpages/


      - name: Fake Jekyll
        run: |
          cp -R build/ghpages build/_site
          echo "<html><body><h1>hi</h1></body></html>" > build/_site/index.html


      - name: Check working directory
        run: |
          ls -R ./

      - name: Check compiled Static site
        run: |
          ls -R build/_site/


      - name: Upload GH Pages
        uses: actions/upload-pages-artifact@v1
        with:
          path: build/_site





  # Deploy job
  deploy:
    # Add a dependency to the build job
    needs: build

    # Grant GITHUB_TOKEN the permissions required to make a Pages deployment
    permissions:
      pages: write      # to deploy to Pages
      id-token: write   # to verify the deployment originates from an appropriate source

    # Deploy to the github-pages environment
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    # Specify runner + deployment step
    runs-on: ubuntu-latest
    steps:

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v1
